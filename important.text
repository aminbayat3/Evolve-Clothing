<Routes>
    <Route path="/" element={<Navigation />}>
        <Route index element={<HomePage />} />
        <Route path="shop" element={<Shop />} />
    </Route>
</Routes>

***********************************************
import { Fragment } from 'react';
import { Outlet } from 'react-router-dom';

import './navigation.styles.scss';

//Fragments let you group a list of children without adding extra nodes to the DOM. if i used a div instead of Fragment that div would be redundent.
const Navigation = () => {
    return(
        <Fragment>
            <div className='navigation'>
                <h1>I am the navigation bar</h1>
            </div>
            <Outlet />
        </Fragment>
    )
}

export default Navigation;

*******************************************'
{
 // isCartOpen ? (<CartDropdown />) : null
 isCartOpen && <CartDropdown />  
} 
//short circuit operator(&& , ||) && => double ampersand // components are always truthy values because they are functions//
 so the short circuit operator says if this total thing (the whole code inside of the curly braces) evaluates to true, then what im gonna return to you is going to be the last thing you gave me.

 ////////////////////////////////////

 import { useNavigate } from 'react-router-dom'; instead of withRouter

const navigate = useNavigate();
//////////////////////////////////////////////

**********************************************
** IMPORTANT POINT FOR PREVENTING UNNECESSARY RENDERS IN OUR APPLICATION
  const categoriesMap = useSelector(selectCategoriesMap); // this useSelector will run every time the state object in root reducer has updated(whether it is currentUser or categories) and it only force the component to re-render if the return of the selector function you pass to it is different,
 and given the fact that the selector always return a new object it will lead to unnecssary re-renders. 
 the solution is to make the selector function runs only when the categories changes. and this is viable via using a library called Reselect. 

 **************************************************

 import { createSelector } from 'reselect'; // this makes our selector, a memoized one. a memoization is the process in which you cache the previous value of something so that if the input has not changed then you just return back the same output

 *****************************************************
Boolean(10) is true
Boolean("GeeksforGeeks") is true
Boolean(2.74) is true
Boolean(-1) is true
Boolean('true') is true
Boolean('false') is true
Boolean(3 * 2 + 1.11) is true
Boolean(1<2) is true
************************************
Boolean(0) is false
Boolean("") is false
Boolean(e) undefined is false
Boolean(-0) is false
Boolean(false) is false
Boolean(NaN) is false
Boolean(null) is false
Boolean(1>2) is false
******************************************
NODE_ENV as performance booster: One of the simplest things we can do to improve performance is to set NODE_ENV to “production”. 

Setting NODE_ENV to “production” makes Express:

Cache view templates.
Cache CSS files generated from CSS extensions.
Generate less verbose error messages.

process.env.NODE_ENV is either devlopment or production //
const middleWares = [process.env.NODE_ENV === 'devlopment' && logger].filter((x) => Boolean(x)) we use this filter to filter out any false value that gets returned if it was on the production mode because we can't pass false as our middleWares array

for example: 
2 === 3 && { a: 'string' } // this will give us back false value
[2 === 3 && { a: 'string' }].filter(Boolean); // it's gonna give us back an empty array because that Boolean function gets rid of all the falsy values

***********************************************************
call effect(saga): anywhere you're going to call a function, you want to use the call effect generator
now inside of redux saga every single step that yields you want to be as descriptive as possible
now descriptive here essentially means creating an effect for it that's why these are called effect generators
an effect is essentially a plain object that describes what's trying to happen, so here with call
this is just gonna say: hey i've got some object where the function name is going to be "createUserDocumentFromAuth"(eg) and then it's gonna say
the params are .... just like this : => 
{ 
    fn: createUserDocumentFromAuth,
    params: [],
}
this plain object above is an effect. ( this might not be the shape, but this just gives you an idea)

why is it useful ::: what this allows us to do is actually makes testing easier when we're going to test sagas, but 
also we're just essentially handing over the execution of this API call or any of this code to our actual generator
and you want to hand over as much of the generator as you can because the generator is gonna be the one that cancel these.
*****************************************************************
There are 3 ways to handle the cart states: 1- using context alone : which we need to manage our Total and Count in a seperate useEffect
hook with a dependency array of cartItems, so whenever the cartItems changes the total and the count will get updated as well
2- the second way( the better way ) is to handle this with context and useReducer hook. then we can have a function instead of two useEffect
where in this function, which gets newCartItem as an argument, we calculate the newTotal and newCount inside of it and then 
we can dispatch an action(only one action and one type(setCartItems))with {newCartItems, newCount, newTotal} as a payload. and we call
this function inside of the functions in which cartItems get changed(like addItem, removeItem, clearItem); we shouldn't calculate cartItems,
total and count in reducers itself cause our code would get messy.we also have different actions for add and remove and clear, but they are all has the SETCARTITEMS Type(event); so we can handle them in one case in cartReducer
3-the third way is by redux which we also encounter two ways of handling the states: first way is to have a selector for Total and Count so
they are not a state. whenever the cartItems get changed, these selectors get updated as well.again we will have different actions for add, remove and clear but the type of theier event is the same (SET-CART-ITEMS);
***********************************************************
remember with context we wanna handle the onAuthStateChanged inside of our userContext but 
in case of redux we wanna do this inside of the App.js.
we also can complete the process of authentication without using onAuthStateChanged by using setCurrentUser
every time we do a sign in or a sign up. but it's really better to handle that with the onAuthStateChanged.
in saga we also get the help of promise to do the check not a listener(observable). 

******************************************************************
if you notice, you can see that we passed a onClick props to the Button Component. actually we did that because we are spreading the otherProps in the button tag itsel.
<Button onClick={handleClick}>Click Here</Button> and then : 

const Button = ({ children, buttonType, ...otherProps }) => {
    console.log(otherProps) //{ onClick= f}  and also for form input the otherPrps will be this:{name: '', type: 'email', value: '', onChange: f}
  return (
    <button
      {...otherProps} // so when we spred the otherProps object here we are saying onClick = f 
    >
      {children}      
    </button>
  );
};

**************************************************************************
solution number 2 regarding styled components when dealing with different buttons.

const BUTTON_TYPE_CLASSES = {
  base: BaseButton,
  google: GoogleSignInButton,
  inverted: InvertedButton,
};


const getButton = (buttonType = 'base') => {
  return BUTTON_TYPE_CLASSES[buttonType];
}

const Button = ({ children, buttonType, ...otherProps }) => {
  const CustomButton = getButton(buttonType);
  return (
      <CustomButton {...otherProps}>
        {children}      
      </CustomButton>
    );
  }

  * remember this: when you have more than one button which are different only based on their color, we should use a different approach. 
  we can only pass a prop to the buttons and based on that we style the buttons just like the code below( you get the idea) ::: 

const handleColorType = color => {
  switch (color) {
    case "primary":
      return "#03a9f3";
    case "danger":
      return "#f56342";
    default:
      return "#fff";
  }
};

const Button = styled.button`
  display: block;
  cursor: pointer;
  border: 0;
  margin: 5px 0;
  background: #000;
  font-size: 20px;
  color: ${({ color }) => handleColorType(color)};

  &:focus {
    outline: 0;
  }
`;

  ********************************************************
we can do this: usually when we need to pass an object to a component instead of only one prop : 
const Baz = styled.div((props) => css`
  border-radius: 50%;
  display: flex;
  width: ${props.size};
  height: ${props.size};
  color: ${props.bgColor};
  background-color: ${props.bgColor};
`);
instead of doing these two: 
Approach 1

const Foo = styled.div`
  border-radius: 50%;
  display: flex;
  width: ${(props) => props.size};
  height: ${(props) => props.size};
  color: ${(props) => props.bgColor};
  background-color: ${(props) => props.bgColor};
`;
vs

Approach 2

const Bar = styled.div`
  border-radius: 50%;
  display: flex;
  ${(props) => {
    return css`
      width: ${props.size};
      height: ${props.size};
      color: ${props.bgColor};
      background-color: ${props.bgColor};
    `;
  }}
`;

**THIS IS HOW WE CAN USE MIXINS IN STYLED COMPONENTS: 
const shrinkLabelStyles = css` 
  top: -14px;
  font-size: 12px;
  color: ${mainColor};
`;
************************************SOME DESIGNING TIPS
a strategy for lazy-loading:
<img src="fake_small_image.gif" data-src="real_image.jpg">
A common approach to lazy-loading images is to set the src to a very small image,
sometimes a 1x1px gif, and once the user scrolls and the image is on the screen replace the src with the real one.

TIPS: 
Here’s a terrific example of eliminating friction: Since mobile user interfaces are typically harder to navigate,
it would be best to switch to a one-page checkout for mobile eCommerce stores and only enable multi-step checkout for desktop eCommerce stores.

2-People typically expect the main desktop navigation to be at the top; however, on mobile,
 it should be at the bottom. Thumbs don’t reach the top comfortably.

 3-Other interactive elements should also be easy to reach. This means keeping them in the center of the screen
  because it’s more difficult for thumbs to reach the sides and corners of device screens.

3-So that they can be tapped with ease, 
important links and CTAs should have a height of at least 44px (smaller tap targets are bad for usability).

4- Credit/top-up card scanning (because forms are often tricky on mobile)
Photo-sharing on social media, because the media is already on your device
Two-factor authentication (because you’re already on your mobile device)
Quickly checking stocks/analytics (because mobile apps simplify information)
Performing a web search with voice (because hands-free is easier than typing)

5-Keep these tips in mind when designing fluid/adaptive layouts:
Percentage units will allow elements to be fluid.
Setting minimum and maximum widths can enable the “but don’t go smaller/bigger than this” scenario.
SVG image formats can be scaled up and down without losing quality, and are resolution-independent (as opposed to JPGs and PNGs, which are not).

