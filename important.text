<Routes>
    <Route path="/" element={<Navigation />}>
        <Route index element={<HomePage />} />
        <Route path="shop" element={<Shop />} />
    </Route>
</Routes>

***********************************************
import { Fragment } from 'react';
import { Outlet } from 'react-router-dom';

import './navigation.styles.scss';

//Fragments let you group a list of children without adding extra nodes to the DOM. if i used a div instead of Fragment that div would be redundent.
const Navigation = () => {
    return(
        <Fragment>
            <div className='navigation'>
                <h1>I am the navigation bar</h1>
            </div>
            <Outlet />
        </Fragment>
    )
}

export default Navigation;

*******************************************'
{
 // isCartOpen ? (<CartDropdown />) : null
 isCartOpen && <CartDropdown />  
} 
//short circuit operator(&& , ||) && => double ampersand // components are always truthy values because they are functions//
 so the short circuit operator says if this total thing (the whole code inside of the curly braces) evaluates to true, then what im gonna return to you is going to be the last thing you gave me.

 ////////////////////////////////////

 import { useNavigate } from 'react-router-dom'; instead of withRouter

const navigate = useNavigate();
//////////////////////////////////////////////

**********************************************
** IMPORTANT POINT FOR PREVENTING UNNECESSARY RENDERS IN OUR APPLICATION
  const categoriesMap = useSelector(selectCategoriesMap); // this useSelector will run every time the state object in root reducer has updated(whether it is currentUser or categories) and it only force the component to re-render if the return of the selector function you pass to it is different,
 and given the fact that the selector always return a new object it will lead to unnecssary re-renders. 
 the solution is to make the selector function runs only when the categories changes. and this is viable via using a library called Reselect. 

 **************************************************

 import { createSelector } from 'reselect'; // this makes our selector, a memoized one. a memoization is the process in which you cache the previous value of something so that if the input has not changed then you just return back the same output